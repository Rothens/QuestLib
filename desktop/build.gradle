apply plugin: "java"
apply plugin: "application"

sourceCompatibility = 1.8
targetCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/" ]

mainClassName = "hu.rothens.example.desktop.DesktopLauncher"
def assetsDir = new File("../core/assets")

// Configure the run task created by the application plugin
application {
    mainClass = mainClassName
}

// Configure all JavaExec tasks
tasks.withType(JavaExec) {
    workingDir = assetsDir
    standardInput = System.in
    ignoreExitValue = true
}

// Instead of creating a new 'run' task, configure the existing one
run {
    classpath = sourceSets.main.runtimeClasspath
}

task dist(type: Jar) {
    dependsOn classes

    from sourceSets.main.output.classesDirs
    from sourceSets.main.output.resourcesDir
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from assetsDir

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Main-Class': mainClassName
    }
}

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/core/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
    doLast {
        def classpath = new XmlParser().parse(file(".classpath"))
        new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ])
        def writer = new FileWriter(file(".classpath"))
        def printer = new XmlNodePrinter(new PrintWriter(writer))
        printer.setPreserveWhitespace(true)
        printer.print(classpath)
    }
}